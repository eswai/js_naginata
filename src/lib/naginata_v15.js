
var pressed_keys = []; // 同時に押しているキー
var nginput = [];  // 未変換のキー [[KC.NGM], [KC.NGJ, KC.NGW]] (なぎ)のように、同時押しの組み合わせを2次元配列へ格納

const mask_keys = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'l', ';', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', ' '];

// かな変換テーブル
const ngdic = [
    //  前置シフト      同時押し                        かな
    [ [          ] , [ 'u'                   ], ['<Backspace>']],
    [ [          ] , [ ' '                   ], [' '          ]],
    [ [          ] , [ 'm', 'v'              ], ['\n'         ]],
    [ [          ] , [ 't'                   ], ['<Left>'     ]],
    [ [          ] , [ 'y'                   ], ['<Right>'    ]],
    [ [' '       ] , [ 't'                   ], ['<Left>'     ]],
    [ [' '       ] , [ 'y'                   ], ['<Right>'    ]],
    [ [          ] , [ ';'                   ], ['ー'         ]], // ー
    [ [' '       ] , [ 'v'                   ], [ '、'        ]], // 、{Enter}
    [ [' '       ] , [ 'm'                   ], [ '。'        ]], // 。{Enter}
      
    [ [          ] , [ 'j'                   ], ['あ'         ]], // あ
    [ [          ] , [ 'k'                   ], ['い'         ]], // い
    [ [          ] , [ 'l'                   ], ['う'         ]], // う
    [ [' '       ] , [ 'o'                   ], ['え'         ]], // え
    [ [' '       ] , [ 'n'                   ], ['お'         ]], // お
    [ [          ] , [ 'f'                   ], ['か'         ]], // か
    [ [          ] , [ 'w'                   ], ['き'         ]], // き
    [ [          ] , [ 'h'                   ], ['く'         ]], // く
    [ [          ] , [ 's'                   ], ['け'         ]], // け
    [ [          ] , [ 'v'                   ], ['こ'         ]], // こ
    [ [' '       ] , [ 'u'                   ], ['さ'         ]], // さ
    [ [          ] , [ 'r'                   ], ['し'         ]], // し
    [ [          ] , [ 'o'                   ], ['す'         ]], // す
    [ [' '       ] , [ 'a'                   ], ['せ'         ]], // せ
    [ [          ] , [ 'b'                   ], ['そ'         ]], // そ
    [ [          ] , [ 'n'                   ], ['た'         ]], // た
    [ [' '       ] , [ 'g'                   ], ['ち'         ]], // ち
    [ [' '       ] , [ 'l'                   ], ['つ'         ]], // つ
    [ [          ] , [ 'e'                   ], ['て'         ]], // て
    [ [          ] , [ 'd'                   ], ['と'         ]], // と
    [ [          ] , [ 'm'                   ], ['な'         ]], // な
    [ [' '       ] , [ 'd'                   ], ['に'         ]], // に
    [ [' '       ] , [ 'w'                   ], ['ぬ'         ]], // ぬ
    [ [' '       ] , [ 'r'                   ], ['ね'         ]], // ね
    [ [' '       ] , [ 'j'                   ], ['の'         ]], // の
    [ [          ] , [ 'c'                   ], ['は'         ]], // は
    [ [          ] , [ 'x'                   ], ['ひ'         ]], // ひ
    [ [' '       ] , [ 'x'                   ], ['ひ'         ]], // ひ
    [ [' '       ] , [ ';'                   ], ['ふ'         ]], // ふ
    [ [          ] , [ 'p'                   ], ['へ'         ]], // へ
    [ [          ] , [ 'z'                   ], ['ほ'         ]], // ほ
    [ [' '       ] , [ 'z'                   ], ['ほ'         ]], // ほ
    [ [' '       ] , [ 'f'                   ], ['ま'         ]], // ま
    [ [' '       ] , [ 'b'                   ], ['み'         ]], // み
    [ [' '       ] , [ ','                   ], ['む'         ]], // む
    [ [' '       ] , [ 's'                   ], ['め'         ]], // め
    [ [' '       ] , [ 'k'                   ], ['も'         ]], // も
    [ [' '       ] , [ 'h'                   ], ['や'         ]], // や
    [ [' '       ] , [ 'p'                   ], ['ゆ'         ]], // ゆ
    [ [' '       ] , [ 'i'                   ], ['よ'         ]], // よ
    [ [          ] , [ '.'                   ], ['ら'         ]], // ら
    [ [' '       ] , [ 'e'                   ], ['り'         ]], // り
    [ [          ] , [ 'i'                   ], ['る'         ]], // る
    [ [          ] , [ '/'                   ], ['れ'         ]], // れ
    [ [' '       ] , [ '/'                   ], ['れ'         ]], // れ
    [ [          ] , [ 'a'                   ], ['ろ'         ]], // ろ
    [ [' '       ] , [ '.'                   ], ['わ'         ]], // わ
    [ [' '       ] , [ 'c'                   ], ['を'         ]], // を
    [ [          ] , [ ','                   ], ['ん'         ]], // ん
    [ [          ] , [ 'q'                   ], ['ゔ'         ]], // ゔ
    [ [' '       ] , [ 'q'                   ], ['ゔ'         ]], // ゔ
    [ [          ] , [ 'j', 'f'              ], ['が'         ]], // が
    [ [          ] , [ 'j', 'w'              ], ['ぎ'         ]], // ぎ
    [ [          ] , [ 'f', 'h'              ], ['ぐ'         ]], // ぐ
    [ [          ] , [ 'j', 's'              ], ['げ'         ]], // げ
    [ [          ] , [ 'j', 'v'              ], ['ご'         ]], // ご
    [ [          ] , [ 'f', 'u'              ], ['ざ'         ]], // ざ
    [ [          ] , [ 'j', 'r'              ], ['じ'         ]], // じ
    [ [          ] , [ 'f', 'o'              ], ['ず'         ]], // ず
    [ [          ] , [ 'j', 'a'              ], ['ぜ'         ]], // ぜ
    [ [          ] , [ 'j', 'b'              ], ['ぞ'         ]], // ぞ
    [ [          ] , [ 'f', 'n'              ], ['だ'         ]], // だ
    [ [          ] , [ 'j', 'g'              ], ['ぢ'         ]], // ぢ
    [ [          ] , [ 'f', 'l'              ], ['づ'         ]], // づ
    [ [          ] , [ 'j', 'e'              ], ['で'         ]], // で
    [ [          ] , [ 'j', 'd'              ], ['ど'         ]], // ど
    [ [          ] , [ 'j', 'c'              ], ['ば'         ]], // ば
    [ [          ] , [ 'j', 'x'              ], ['び'         ]], // び
    [ [          ] , [ 'f', ';'              ], ['ぶ'         ]], // ぶ
    [ [          ] , [ 'f', 'p'              ], ['べ'         ]], // べ
    [ [          ] , [ 'j', 'z'              ], ['ぼ'         ]], // ぼ
    [ [          ] , [ 'f', 'l'              ], ['ゔ'         ]], // ゔ
    [ [          ] , [ 'm', 'c'              ], ['ぱ'         ]], // ぱ
    [ [          ] , [ 'm', 'x'              ], ['ぴ'         ]], // ぴ
    [ [          ] , [ 'v', ';'              ], ['ぷ'         ]], // ぷ
    [ [          ] , [ 'v', 'p'              ], ['ぺ'         ]], // ぺ
    [ [          ] , [ 'm', 'z'              ], ['ぽ'         ]], // ぽ
    [ [          ] , [ 'q', 'h'              ], ['ゃ'         ]], // ゃ
    [ [          ] , [ 'q', 'p'              ], ['ゅ'         ]], // ゅ
    [ [          ] , [ 'q', 'i'              ], ['ょ'         ]], // ょ
    [ [          ] , [ 'q', 'j'              ], ['ぁ'         ]], // ぁ
    [ [          ] , [ 'q', 'k'              ], ['ぃ'         ]], // ぃ
    [ [          ] , [ 'q', 'l'              ], ['ぅ'         ]], // ぅ
    [ [          ] , [ 'q', 'o'              ], ['ぇ'         ]], // ぇ
    [ [          ] , [ 'q', 'n'              ], ['ぉ'         ]], // ぉ
    [ [          ] , [ 'q', '.'              ], ['ゎ'         ]], // ゎ
    [ [          ] , [ 'g'                   ], ['っ'         ]], // っ
    [ [          ] , [ 'q', 's'              ], ['ヶ'         ]], // ヶ
    [ [          ] , [ 'q', 'f'              ], ['ヵ'         ]], // ヵ
    [ [          ] , [ 'r', 'h'              ], ['しゃ'       ]], // しゃ
    [ [          ] , [ 'r', 'p'              ], ['しゅ'       ]], // しゅ
    [ [          ] , [ 'r', 'i'              ], ['しょ'       ]], // しょ
    [ [          ] , [ 'j', 'r', 'h'         ], ['じゃ'       ]], // じゃ
    [ [          ] , [ 'j', 'r', 'p'         ], ['じゅ'       ]], // じゅ
    [ [          ] , [ 'j', 'r', 'i'         ], ['じょ'       ]], // じょ
    [ [          ] , [ 'w', 'h'              ], ['きゃ'       ]], // きゃ
    [ [          ] , [ 'w', 'p'              ], ['きゅ'       ]], // きゅ
    [ [          ] , [ 'w', 'i'              ], ['きょ'       ]], // きょ
    [ [          ] , [ 'j', 'w', 'h'         ], ['ぎゃ'       ]], // ぎゃ
    [ [          ] , [ 'j', 'w', 'p'         ], ['ぎゅ'       ]], // ぎゅ
    [ [          ] , [ 'j', 'w', 'i'         ], ['ぎょ'       ]], // ぎょ
    [ [          ] , [ 'g', 'h'              ], ['ちゃ'       ]], // ちゃ
    [ [          ] , [ 'g', 'p'              ], ['ちゅ'       ]], // ちゅ
    [ [          ] , [ 'g', 'i'              ], ['ちょ'       ]], // ちょ
    [ [          ] , [ 'j', 'g', 'h'         ], ['ぢゃ'       ]], // ぢゃ
    [ [          ] , [ 'j', 'g', 'p'         ], ['ぢゅ'       ]], // ぢゅ
    [ [          ] , [ 'j', 'g', 'i'         ], ['ぢょ'       ]], // ぢょ
    [ [          ] , [ 'd', 'h'              ], ['にゃ'       ]], // にゃ
    [ [          ] , [ 'd', 'p'              ], ['にゅ'       ]], // にゅ
    [ [          ] , [ 'd', 'i'              ], ['にょ'       ]], // にょ
    [ [          ] , [ 'x', 'h'              ], ['ひゃ'       ]], // ひゃ
    [ [          ] , [ 'x', 'p'              ], ['ひゅ'       ]], // ひゅ
    [ [          ] , [ 'x', 'i'              ], ['ひょ'       ]], // ひょ
    [ [          ] , [ 'j', 'x', 'h'         ], ['びゃ'       ]], // びゃ
    [ [          ] , [ 'j', 'x', 'p'         ], ['びゅ'       ]], // びゅ
    [ [          ] , [ 'j', 'x', 'i'         ], ['びょ'       ]], // びょ
    [ [          ] , [ 'm', 'x', 'h'         ], ['ぴゃ'       ]], // ぴゃ
    [ [          ] , [ 'm', 'x', 'p'         ], ['ぴゅ'       ]], // ぴゅ
    [ [          ] , [ 'm', 'x', 'i'         ], ['ぴょ'       ]], // ぴょ
    [ [          ] , [ 'b', 'h'              ], ['みゃ'       ]], // みゃ
    [ [          ] , [ 'b', 'p'              ], ['みゅ'       ]], // みゅ
    [ [          ] , [ 'b', 'i'              ], ['みょ'       ]], // みょ
    [ [          ] , [ 'e', 'h'              ], ['りゃ'       ]], // りゃ
    [ [          ] , [ 'e', 'p'              ], ['りゅ'       ]], // りゅ
    [ [          ] , [ 'e', 'i'              ], ['りょ'       ]], // りょ
    [ [          ] , [ 'm', 'e', 'k'         ], ['てぃ'       ]], // てぃ
    [ [          ] , [ 'm', 'e', 'p'         ], ['てゅ'       ]], // てゅ
    [ [          ] , [ 'j', 'e', 'k'         ], ['でぃ'       ]], // でぃ
    [ [          ] , [ 'j', 'e', 'p'         ], ['でゅ'       ]], // でゅ
    [ [          ] , [ 'm', 'd', 'l'         ], ['とぅ'       ]], // とぅ
    [ [          ] , [ 'j', 'd', 'l'         ], ['どぅ'       ]], // どぅ
    [ [          ] , [ 'm', 'r', 'o'         ], ['しぇ'       ]], // しぇ
    [ [          ] , [ 'm', 'g', 'o'         ], ['ちぇ'       ]], // ちぇ
    [ [          ] , [ 'j', 'r', 'o'         ], ['じぇ'       ]], // じぇ
    [ [          ] , [ 'j', 'g', 'o'         ], ['ぢぇ'       ]], // ぢぇ
    [ [          ] , [ 'v', ';', 'j'         ], ['ふぁ'       ]], // ふぁ
    [ [          ] , [ 'v', ';', 'k'         ], ['ふぃ'       ]], // ふぃ
    [ [          ] , [ 'v', ';', 'o'         ], ['ふぇ'       ]], // ふぇ
    [ [          ] , [ 'v', ';', 'n'         ], ['ふぉ'       ]], // ふぉ
    [ [          ] , [ 'v', ';', 'p'         ], ['ふゅ'       ]], // ふゅ
    [ [          ] , [ 'v', 'k', 'o'         ], ['いぇ'       ]], // いぇ
    [ [          ] , [ 'v', 'l', 'k'         ], ['うぃ'       ]], // うぃ
    [ [          ] , [ 'v', 'l', 'o'         ], ['うぇ'       ]], // うぇ
    [ [          ] , [ 'v', 'l', 'n'         ], ['うぉ'       ]], // うぉ
    [ [          ] , [ 'm', 'q', 'j'         ], ['ゔぁ'       ]], // ゔぁ
    [ [          ] , [ 'm', 'q', 'k'         ], ['ゔぃ'       ]], // ゔぃ
    [ [          ] , [ 'm', 'q', 'o'         ], ['ゔぇ'       ]], // ゔぇ
    [ [          ] , [ 'm', 'q', 'n'         ], ['ゔぉ'       ]], // ゔぉ
    [ [          ] , [ 'm', 'q', 'p'         ], ['ゔゅ'       ]], // ゔゅ
    [ [          ] , [ 'v', 'h', 'j'         ], ['くぁ'       ]], // くぁ
    [ [          ] , [ 'v', 'h', 'k'         ], ['くぃ'       ]], // くぃ
    [ [          ] , [ 'v', 'h', 'o'         ], ['くぇ'       ]], // くぇ
    [ [          ] , [ 'v', 'h', 'n'         ], ['くぉ'       ]], // くぉ
    [ [          ] , [ 'v', 'h', '.'         ], ['くゎ'       ]], // くゎ
    [ [          ] , [ 'f', 'h', 'j'         ], ['ぐぁ'       ]], // ぐぁ
    [ [          ] , [ 'f', 'h', 'k'         ], ['ぐぃ'       ]], // ぐぃ
    [ [          ] , [ 'f', 'h', 'o'         ], ['ぐぇ'       ]], // ぐぇ
    [ [          ] , [ 'f', 'h', 'n'         ], ['ぐぉ'       ]], // ぐぉ
    [ [          ] , [ 'f', 'h', '.'         ], ['ぐゎ'       ]], // ぐゎ
    [ [          ] , [ 'v', 'l', 'j'         ], ['つぁ'       ]], // つぁ
      
    [ ['j', 'k'  ] , [ 'd'                   ], ['？'         ]], // ？{改行}
    [ ['j', 'k'  ] , [ 'c'                   ], ['！'         ]], // ！{改行}
  
    [ ['j', 'k'  ] , [ 'q'                   ], [                               ]], // ^{End}
    [ ['j', 'k'  ] , [ 'w'                   ], ['『』', '<Left>'               ]], // 『』{改行}{↑}
    [ ['j', 'k'  ] , [ 'e'                   ], ['でぃ'                         ]], // /*ディ*/
    [ ['j', 'k'  ] , [ 'r'                   ], [                               ]], // ^s
    [ ['j', 'k'  ] , [ 't'                   ], ['・'                           ]], // ・
    [ ['j', 'k'  ] , [ 'a'                   ], ['……'                         ]], // ……{改行}
    [ ['j', 'k'  ] , [ 's'                   ], ['()', '<Left>'                 ]], // (){改行}{↑}
    [ ['j', 'k'  ] , [ 'f'                   ], ['「」', '<Left>'               ]], // 「」{改行}{↑}
    [ ['j', 'k'  ] , [ 'g'                   ], ['《》', '<Left>'               ]], // 《》{改行}{↑}
    [ ['j', 'k'  ] , [ 'z'                   ], ['――'                         ]], // ――{改行}
    [ ['j', 'k'  ] , [ 'x'                   ], ['【】', '<Left>'               ]], // 【】{改行}{↑}
    [ ['j', 'k'  ] , [ 'v'                   ], ['\n', '<Left>'                 ]], // {改行}{↓}
    [ ['j', 'k'  ] , [ 'b'                   ], ['\n', '<Left>'                 ]], // {改行}{←}
  
    [ ['d', 'f'  ] , [ 'y'                   ], [                               ]], // {Home}
    [ ['d', 'f'  ] , [ 'u'                   ], [                               ]], // +{End}{BS}
    [ ['d', 'f'  ] , [ 'i'                   ], [                               ]], // {vk1Csc079}
    [ ['d', 'f'  ] , [ 'o'                   ], ['<Delete>'                     ]], // {Del}
    [ ['d', 'f'  ] , [ 'p'                   ], [                               ]], // {Esc 3}
    [ ['d', 'f'  ] , [ 'h'                   ], [                               ]], // {Enter}{End}
    [ ['d', 'f'  ] , [ 'j'                   ], ['<Left>'                       ]], // {↑}
    [ ['d', 'f'  ] , [ 'k'                   ], [                               ]], // +{↑}
    [ ['d', 'f'  ] , [ 'l'                   ], [                               ]], // +{↑ 7}
    [ ['d', 'f'  ] , [ 'b'                   ], [                               ]], // ^i
    [ ['d', 'f'  ] , [ 'n'                   ], [                               ]], // {End}
    [ ['d', 'f'  ] , [ 'm'                   ], ['<Right>'                      ]], // {↓}
    [ ['d', 'f'  ] , [ ','                   ], [                               ]], // +{↓}
    [ ['d', 'f'  ] , [ '.'                   ], [                               ]], // +{↓ 7}
    [ ['d', 'f'  ] , [ '/'                   ], [                               ]], // ^u
  
    [ ['m', ','  ] , [ 'q'                   ], [                               ]], // {Home}{→}{End}{Del 4}{←}
    [ ['m', ','  ] , [ 'w'                   ], [                               ]], // ^x『^v』{改行}{Space}+{↑}^x
    [ ['m', ','  ] , [ 'e'                   ], [                               ]], // {Home}{改行}{Space 3}{←}
    [ ['m', ','  ] , [ 'r'                   ], ['　　　'                        ]], // {Space 3}
    [ ['m', ','  ] , [ 't'                   ], ['〇'                           ]], // 〇{改行}
    [ ['m', ','  ] , [ 'a'                   ], [                               ]], // {Home}{→}{End}{Del 2}{←}
    [ ['m', ','  ] , [ 's'                   ], [                               ]], // ^x(^v){改行}{Space}+{↑}^x
    [ ['m', ','  ] , [ 'd'                   ], [                               ]], // {Home}{改行}{Space 1}{←}
    [ ['m', ','  ] , [ 'f'                   ], [                               ]], // ^x「^v」{改行}{Space}+{↑}^x
    [ ['m', ','  ] , [ 'g'                   ], [                               ]], // ^x｜{改行}^v《》{改行}{↑}{Space}+{↑}^x
    [ ['m', ','  ] , [ 'z'                   ], ['　　　×　　　×　　　×', '\n' ]], // 　　　×　　　×　　　×{改行 2}
    [ ['m', ','  ] , [ 'x'                   ], [                               ]], // ^x【^v】{改行}{Space}+{↑}^x
    [ ['m', ','  ] , [ 'c'                   ], ['／'                           ]], // ／{改行}
    [ ['m', ','  ] , [ 'v'                   ], [                               ]], // {改行}{End}{改行}「」{改行}{↑}
    [ ['m', ','  ] , [ 'b'                   ], [                               ]], // {改行}{End}{改行}{Space}
  
    [ ['m', ','  ] , [ 'y'                   ], [                               ]], // +{Home}
    [ ['m', ','  ] , [ 'u'                   ], [                               ]], // ^x
    [ ['m', ','  ] , [ 'i'                   ], [                               ]], // ^v
    [ ['m', ','  ] , [ 'o'                   ], [                               ]], // ^y
    [ ['m', ','  ] , [ 'p'                   ], [                               ]], // ^z
    [ ['m', ','  ] , [ 'h'                   ], [                               ]], // ^c
    [ ['m', ','  ] , [ 'j'                   ], ['Right'                        ]], // {→}
    [ ['m', ','  ] , [ 'k'                   ], [                               ]], // +{→}
    [ ['m', ','  ] , [ 'l'                   ], [                               ]], // +{→ 5}
    [ ['m', ','  ] , [ ';'                   ], [                               ]], // +{→ 20}
    [ ['m', ','  ] , [ 'n'                   ], [                               ]], // +{End}
    [ ['m', ','  ] , [ 'm'                   ], ['Left'                         ]], // {←}
    [ ['m', ','  ] , [ ','                   ], [                               ]], // +{←}
    [ ['m', ','  ] , [ '.'                   ], [                               ]], // +{← 5}
    [ ['m', ','  ] , [ '/'                   ], [                               ]], // +{← 20}

];

function isSuperset(array1, array2) {
    for (const elem of array2) {
        if (!array1.includes(elem)) {
            return false;
        }
    }
    return true;
}

function isSubset(array1, array2) {
    return isSuperset(array2, array1);
}

function isEqual(array1, array2) {
    return array1.size === array2.size && array1.every((x) => array2.includes(x));
}

function union(array1, array2) {
    const _union = new Set(array1);
    for (const elem of array2) {
        _union.add(elem);
    }
    return Array.from(_union);
}

// かな変換の処理
function ngpress(keycode) {
    console.log('key press   : ' + keycode);
    if (!mask_keys.includes(keycode)) return [];
    pressed_keys.push(keycode);

    let i = nginput.length - 1;
    let j = -1;
    if (i >= 0 ) {
        j = nginput[i].length - 1;
    }

    // 後置シフトはしない
    if (keycode == ' ') {
        nginput.push([keycode]);
    // 前のキーとの同時押しの可能性があるなら前に足す
    // 同じキー連打を除外
    // V, H, EでVHがロールオーバーすると「こくて」=[[V,H], [E]]になる。「こりゃ」は[[V],[H,E]]。
    } else if (nginput.length > 0 && nginput[i][j] != keycode && number_of_candidates(nginput[i].concat([keycode])) > 0) {
        nginput[i].push(keycode);
    // 前のキーと同時押しはない
    } else {
        nginput.push([keycode]);
    }

    // 連続シフトする
    i = nginput.length - 1;
    for (const rs of [['d', 'f'], ['c', 'v'], ['j', 'k'], ['m', ','], [' '], ['f'], ['v'], ['j'], ['m']]) {
        const rskc = rs.concat(nginput[i]);
        if (rs.includes(keycode) == false && isSubset(rs, pressed_keys) && number_of_matches(rskc) > 0) {
            nginput[i] = rskc;
            break;
        }
    }

    if (nginput.length > 1 || (nginput.length > 0 && number_of_candidates(nginput[0]) == 1)) {
        return ngtype(nginput.shift());
    }

    return '';
}


function ngrelease(keycode) {
    console.log('key release : ' + keycode);
    if (!mask_keys.includes(keycode)) return [];
    pressed_keys = pressed_keys.filter((x) => x != keycode);

    // 全部キーを離したらバッファを全部吐き出す
    if (pressed_keys.length == 0) {
        let r = [];
        while (nginput.length > 0) {
            r = r.concat(ngtype(nginput.shift()));
        }
        return r;
    }

    return '';
}

function ngtype(keys) {
    if (keys.length == 0) {
        return [];
    }
    // console.log(nginput);

    for (const k of ngdic) {
        if (isEqual(keys, union(k[0], k[1]))) {
            return k[2];
        }
    }
    // JIみたいにJIを含む同時押しはたくさんあるが、JIのみの同時押しがないとき
    // 最後の１キーを別に分けて変換する
    const kl = keys.shift();
    return ngtype(kl).concat(ngtype(keys));
}


function number_of_matches(keys) {
    if (keys.length == 0) {
        return 0;
    }

    let noc = 0;

    // skc = set(map(lambda x: KC.NGSFT if x == KC.NGSFT2 else x, keys))
    if (keys[0] == ' ' && keys.length == 1) {
        return 1;
    }
    if (keys[0] == ' ' && keys.length > 1) {
        const skc = keys.slice(1);
        for (const k of ngdic) {
            if (k[0].includes(' ') && isEqual(skc, k[1])) {
                noc += 1;
                if (noc > 1) {
                    return noc;
                }
            }
        }
    }
    for (const rs of [['d', 'f'], ['c', 'v'], ['j', 'k'], ['m', ',']]) {
        if (keys.length == 3 && isEqual(keys.slice(0, 2), rs)) {
            for (const k of ngdic) {
                    if (isEqual(k[0], rs) && isEqual(k[1], keys[2])) {
                    noc = 1;
                    return noc;
                }
            }
        }
    }
    for (const k of ngdic) {
        if (k[0].length == 0 && isEqual(keys, k[1])) {
            noc += 1;
            if (noc > 1) {
                return noc;
            }
        }
    }

    return noc
}

function number_of_candidates(keys) {
    if (keys.length == 0) {
        return 0;
    }

    let noc = 0;

    for (const rs of [[' '], ['d', 'f'], ['c', 'v'], ['j', 'k'], ['m', ',']]) {
        if (isEqual(keys, rs)) {
            return 2;
        }
    }

    if (keys[0] == ' ' && keys.length > 1) {
        const skc = keys.slice(1);
        for (const k of ngdic) {
            if (k[0].includes(' ') && isSubset(skc, k[1])) {
                noc += 1;
                if (noc > 1) {
                    return noc;
                }
            }
        }
    }
    for (const rs of [['d', 'f'], ['c', 'v'], ['j', 'k'], ['m', ',']]) {
        if (keys.length == 3 && isEqual(keys.slice(0, 2), rs)) {
            for (const k of ngdic) {
                if (isEqual(k[0], rs) && isEqual(k[1], new keys[2])) {
                    noc = 1;
                    return noc;
                }
            }
        }
    }
    const skc = new Set(keys);
    for (const k of ngdic) {
        if (k[0].length == 0 && isSubset(skc, k[1])) {
            if (keys.length < k[1].length) {
                return 2;
            } else {
                noc += 1;
                if (noc > 1) {
                    return noc;
                }
            }
        }
    }

    return noc
}

export { ngpress, ngrelease }